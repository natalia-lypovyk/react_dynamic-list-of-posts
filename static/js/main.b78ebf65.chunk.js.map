{"version":3,"sources":["api.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostsList/PostsList.tsx","App.tsx","index.tsx"],"names":["API_URL","User","user","name","email","city","address","className","href","Comment","comment","body","CommentList","comments","map","item","key","id","Post","post","title","PostsList","posts","App","useState","setPosts","isLoading","setLoading","searchValue","setValue","handleLoad","a","Promise","all","fetch","then","response","json","postsLoaded","usersLoaded","commentsLoaded","postsWithUserComments","find","userId","filter","postId","searchedPosts","toLowerCase","includes","length","type","onClick","value","placeholder","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b78ebf65.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = (): Promise<Post[]> => {\n  return fetch(`${API_URL}/posts`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json());\n};\n\nexport const getComments = (): Promise<Comment[]> => {\n  return fetch(`${API_URL}/comments`)\n    .then(response => response.json());\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n  const { city } = address;\n\n  return (\n    <ul className=\"user-info\">\n      <li className=\"user-info__part\">{name}</li>\n      <li className=\"user-info__part\">\n        <a href=\"`{email}`\" className=\"email\">{email}</a>\n      </li>\n      <li className=\"user-info__part\">{city}</li>\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\nimport './Comment.css';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <>\n      <p className=\"comment__name\">{name}</p>\n      <p className=\"comment__body\">{body}</p>\n      <a href=\"`{email}`\" className=\"comment__email\">{email}</a>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => (\n  <ul className=\"comments\">\n    {comments.map(item => (\n      <li className=\"comment\" key={item.id}>\n        <Comment comment={item} />\n      </li>\n    ))}\n  </ul>\n);\n","import React, { FC } from 'react';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\nimport './Post.css';\n\ninterface Props {\n  post: PostExtended;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <div className=\"post\">\n      <h3 className=\"post__title\">{title}</h3>\n      <p className=\"post__text\">{body}</p>\n      {user && (\n        <User user={user} />\n      )}\n      <h3 className=\"comments-title\">Comments</h3>\n      {comments && (\n        <CommentList key={post.id} comments={comments} />\n      )}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  posts: PostExtended[];\n}\n\nexport const PostsList: FC<Props> = ({ posts }) => (\n  <div className=\"post-list\">\n    {posts.map(post => (\n      <Post key={post.id} post={post} />\n    ))}\n  </div>\n);\n","import React, { useState, FC, ChangeEvent } from 'react';\nimport './App.css';\nimport { getPosts, getUsers, getComments } from './api';\nimport { PostsList } from './components/PostsList/PostsList';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PostExtended[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [searchValue, setValue] = useState('');\n\n  const handleLoad = async () => {\n    setLoading(true);\n    const [postsLoaded, usersLoaded, commentsLoaded] = await Promise\n      .all([getPosts(), getUsers(), getComments()]);\n\n    const postsWithUserComments = postsLoaded.map(post => ({\n      ...post,\n      user: (usersLoaded.find(user => user.id === post.userId)) as User,\n      comments: commentsLoaded.filter(comment => comment.postId === post.id),\n    }));\n\n    setPosts(postsWithUserComments);\n  };\n\n  const handleSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target: { value } } = event;\n\n    setValue(value);\n  };\n\n  const searchedPosts = !searchValue\n    ? posts\n    : posts.filter(post => post.title\n      .toLowerCase()\n      .includes(searchValue.toLowerCase()) || post.body\n      .toLowerCase()\n      .includes(searchValue.toLowerCase()));\n\n  if (posts.length === 0) {\n    return (\n      <>\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={handleLoad}\n        >\n          Load\n        </button>\n        {isLoading && (\n          <p className=\"text\">Loading...</p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={searchValue}\n        placeholder=\"Enter some text\"\n        onChange={handleSearch}\n      />\n      <PostsList posts={searchedPosts} />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}